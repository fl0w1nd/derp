name: Build and Push DERP Docker Image

# 版本号
run-name: Build and Push DERP Image ${{ github.event.inputs.version || '(auto-latest)' }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version (e.g., 1.56.0). Leave blank to use the latest from Go Proxy.'
        required: false
        default: ''

env:
  REGISTRY: docker.io
  IMAGE_NAME: fl0w1nd/derper

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Determine Image Version
        id: get_version
        run: |
          USER_VERSION="${{ github.event.inputs.version }}"
          if [ -n "$USER_VERSION" ]; then
            echo "✅ Using user-provided version: ${USER_VERSION}"
            echo "version=${USER_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No version provided, fetching latest from Go Proxy..."
            LATEST_VERSION=$(curl -s "https://proxy.golang.org/tailscale.com/@latest" | jq -r .Version | sed 's/^v//')
            if [ -z "$LATEST_VERSION" ]; then
              echo "❌ Error: Failed to fetch latest version from Go Proxy."
              exit 1
            fi
            echo "✅ Fetched latest version: ${LATEST_VERSION}"
            echo "version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: ⚙️ Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🚀 Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            DERP_VERSION=v${{ steps.get_version.outputs.version }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📝 Print image digest
        run: |
          echo "🎉 Successfully pushed images with tags:"
          echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}"
          echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Image Digest: ${{ steps.build_and_push.outputs.digest }}"
